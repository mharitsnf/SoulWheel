[gd_resource type="Resource" load_steps=4 format=2]

[ext_resource path="res://Resources/Possessions/Attack Skills/attack_skill.gd" type="Script" id=1]

[sub_resource type="GDScript" id=2]
script/source = "extends Node


var preprocess_a
var process_a
var postprocess_a

var preprocess_d
var process_d
var postprocess_d

var time_elapsed = 0

var rng = RandomNumberGenerator.new()
var tween = Tween.new()

# Attack:
# Enemy1 has one attack pattern.
# 1. One area with constant speed.

# Defend:
# Enemy1 has one defend pattern.
# 1. One area with constant speed.


func _init():
	add_child(tween)
	
	rng.randomize()
	
	preprocess_a = funcref(self, \"_preprocess_a\")
	process_a = funcref(self, \"_process_a\")
	postprocess_a = funcref(self, \"_postprocess_a\")

	preprocess_d = funcref(self, \"_preprocess_d\")
	process_d = funcref(self, \"_process_d\")
	postprocess_d = funcref(self, \"_postprocess_d\")


# ===== ATTACK =====
func _preprocess_a(pattern, phase_number):
	rng.randomize()
	
	match phase_number:
		0: preprocess_a1(pattern)


# phase 1
func preprocess_a1(pattern):
	var rot_angle_variation = rng.randi_range(0, 360)
	for arrow in pattern.arrows:
		# process rotation angle
		arrow.rot_angle += rot_angle_variation
		arrow.rot_angle = fmod(arrow.rot_angle, 360)
		if arrow.rot_angle < 0: arrow.rot_angle += 360


func _process_a(pattern, visuals, phase_number):
	match phase_number:
		0: process_a1(pattern, visuals)


# phase 1
func process_a1(pattern, visuals):
	var _e 

	# --- TWEEN SETUP ---
	for i in range(pattern.arrows.size()):
		var visual = visuals[i]
		var offset = pattern.offset[i]

		_e = tween.interpolate_property(
			visual, \"rotation_degrees\",
			visual.rotation_degrees, visual.rotation_degrees + offset,
			pattern.process_time,
			Tween.TRANS_LINEAR, Tween.EASE_IN_OUT
		)

	# --- TWEEN START ---
	_e = tween.start()
	
	yield(tween, \"tween_all_completed\")
	
	Nodes.wheel.emit_signal(\"action_ended\", \"player\")


func _postprocess_a(pattern, phase_number):
	tween.remove_all()
	time_elapsed = 0
	
	match phase_number:
		0: postprocess_a1(pattern)


# phase 1
func postprocess_a1(pattern):
	for arrow in pattern.arrows:
		arrow.rot_angle = fmod(arrow.rot_angle, 360)
		if arrow.rot_angle < 0: arrow.rot_angle += 360

# ==================


# ===== DEFEND =====
func _preprocess_d(pattern, phase_number):
	rng.randomize()
	
	match phase_number:
		0: preprocess_d1(pattern)


func preprocess_d1(pattern):
	var rot_angle_variation = rng.randi_range(0, 360)
	for arrow in pattern.arrows:
		# process rotation angle
		arrow.rot_angle += rot_angle_variation
		arrow.rot_angle = fmod(arrow.rot_angle, 360)
		if arrow.rot_angle < 0: arrow.rot_angle += 360


func _process_d(pattern, visuals, phase_number):
	match phase_number:
		0: process_d1(pattern, visuals)


func process_d1(pattern, visuals):
	var _e 

	# --- FIRST TWEEN ---
	for i in range(pattern.arrows.size()):
		var visual = visuals[i]
		var offset = pattern.offset[i]
		
		_e = tween.interpolate_property(
			visual, \"rotation_degrees\",
			visual.rotation_degrees, visual.rotation_degrees + offset,
			float(pattern.process_time),
			Tween.TRANS_LINEAR, Tween.EASE_IN_OUT
		)
	
	_e = tween.start()
	
	yield(tween, \"tween_completed\")
	# --- FIRST TWEEN ---
	
	Nodes.wheel.emit_signal(\"action_ended\", \"player\")


func _postprocess_d(pattern, phase_number):
	tween.remove_all()
	time_elapsed = 0
	
	match phase_number:
		0: postprocess_d1(pattern)


func postprocess_d1(pattern):
	for arrow in pattern.arrows:
		arrow.rot_angle = fmod(arrow.rot_angle, 360)
		if arrow.rot_angle < 0: arrow.rot_angle += 360

# ==================

func stop_process():
	if tween.is_active():
		tween.stop_all()
"

[sub_resource type="GDScript" id=1]
script/source = "extends Node


var first_condition
var second_condition


func _init():
	first_condition = funcref(self, \"fc\")
	second_condition = funcref(self, \"sc\")


# ===== FIRST CONDITION =====
func fc(pattern, phase_number):
	match phase_number:
		0: return fc1(pattern)


func fc1(pattern):
	var angle_small = Round.generate_angles(pattern.arrows[0].rot_angle, pattern.arrows[0].thickness)
	var angle_large = Round.generate_angles(pattern.arrows[1].rot_angle, pattern.arrows[1].thickness)
	
	var is_arrow_overlapping = Round.is_hit(angle_small, angle_large)
	
	for arrow in pattern.arrows:
		if !arrow.enemies_struck.empty() and is_arrow_overlapping: return true
			
	return false
# ===========================

# ===== SECOND CONDITION =====
func sc(pattern, phase_number):
	match phase_number:
		0: return sc2(pattern)


func sc2(pattern):
	var angle_small = Round.generate_angles(pattern.arrows[0].rot_angle, pattern.arrows[0].thickness)
	var angle_large = Round.generate_angles(pattern.arrows[1].rot_angle, pattern.arrows[1].thickness)
	
	var is_arrow_overlapping = Round.is_hit(angle_small, angle_large)
	
	for arrow in pattern.arrows:
		if !arrow.struck_by.empty(): return false
	
	return is_arrow_overlapping
# ===========================
"

[resource]
resource_local_to_scene = true
script = ExtResource( 1 )
name = "Clock"
attack_patterns = [ {
"arrows": [ {
"damage": 10,
"move_speed": 240.0,
"rot_angle": 0.0,
"thickness": 2
}, {
"damage": 5,
"move_speed": 100,
"rot_angle": 0,
"thickness": 10
} ],
"offset": [ 2880.0, 720 ],
"process_time": 6.0
} ]
defend_patterns = [ {
"arrows": [ {
"move_speed": 240.0,
"rot_angle": 0.0,
"thickness": 2
}, {
"move_speed": 100,
"rot_angle": 0,
"thickness": 10
} ],
"offset": [ 2880.0, 720 ],
"process_time": 6.0
} ]
hp_cost = 5
is_cost_percentage = false
hp_bonus = 3
is_bonus_percentage = false
conditions = SubResource( 1 )
behaviors = SubResource( 2 )
description = "One slow large arrow (5DMG) and one fast small arrow (10DMG) that rotates on constant speed."
first_condition = "Both arrows hit an area and the small arrow is within the large arrow."
second_condition = "Both arrows avoid damaging areas and the small arrow is within the large arrow."
