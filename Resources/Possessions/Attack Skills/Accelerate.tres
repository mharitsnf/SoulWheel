[gd_resource type="Resource" load_steps=4 format=2]

[ext_resource path="res://Resources/Possessions/Attack Skills/attack_skill.gd" type="Script" id=1]

[sub_resource type="GDScript" id=2]
script/source = "extends Node


var preprocess_a
var process_a
var postprocess_a

var preprocess_d
var process_d
var postprocess_d

var time_elapsed = 0

var rng = RandomNumberGenerator.new()
var tween = Tween.new()

var is_process_running = false
var process_data = {}

signal stop_internal_process

# Attack:
# Enemy1 has one attack pattern.
# 1. One area with constant speed.

# Defend:
# Enemy1 has one defend pattern.
# 1. One area with constant speed.


func _init():
	var _e = connect(\"stop_internal_process\", self, \"_on_stop_internal_process\")
	
	add_child(tween)
	
	rng.randomize()
	
	preprocess_a = funcref(self, \"_preprocess_a\")
	process_a = funcref(self, \"_process_a\")
	postprocess_a = funcref(self, \"_postprocess_a\")

	preprocess_d = funcref(self, \"_preprocess_d\")
	process_d = funcref(self, \"_process_d\")
	postprocess_d = funcref(self, \"_postprocess_d\")


# ===== ATTACK =====
func _preprocess_a(pattern, phase_number):
	rng.randomize()
	
	match phase_number:
		0: preprocess_a1(pattern)


# phase 1
func preprocess_a1(pattern):
	for arrow in pattern.arrows:
		# default reset
		arrow.reset()
		
		# process rotation angle
		arrow.rot_angle += rng.randi_range(0, 360)
		arrow.clamp_rot_angle()
		
		# reset variables
		arrow.rot_angle_displacement = 0


func _process_a(pattern, visuals, phase_number):
	var _e = Nodes.wheel.connect(\"action_ended\", self, \"_on_stop_internal_process\")
	
	match phase_number:
		0: process_a1(pattern, visuals, phase_number)


# phase 1
func process_a1(pattern, visuals, phase_number):
	process_data = {
		\"pattern\": pattern,
		\"visuals\": visuals,
		\"phase_code\": \"a\" + str(phase_number)
	}
	
	is_process_running = true
	
	yield(self, \"stop_internal_process\")
	
	Nodes.wheel.emit_signal(\"action_ended\", \"player\")


func _postprocess_a(pattern, phase_number):
	tween.remove_all()
	time_elapsed = 0
	
	match phase_number:
		0: postprocess_a1(pattern)


# phase 1
func postprocess_a1(pattern):
	for arrow in pattern.arrows:
		# adjust rot angle
		arrow.clamp_rot_angle()
		
		# adjust damage based on displacement
		arrow.damage += floor(arrow.rot_angle_displacement / 360) * pattern.damage_bonus

# ==================


# ===== DEFEND =====
func _preprocess_d(pattern, phase_number):
	rng.randomize()
	
	match phase_number:
		0: preprocess_d1(pattern)


func preprocess_d1(pattern):
	for arrow in pattern.arrows:
		# default reset
		arrow.reset()
		
		# process rotation angle
		arrow.rot_angle += rng.randi_range(0, 360)
		arrow.clamp_rot_angle()
		
		# reset variables
		arrow.rot_angle_displacement = 0


func _process_d(pattern, visuals, phase_number):
	match phase_number:
		0: process_d1(pattern, visuals, phase_number)


func process_d1(pattern, visuals, phase_number):
	process_data = {
		\"pattern\": pattern,
		\"visuals\": visuals,
		\"phase_code\": \"d\" + str(phase_number)
	}
	
	is_process_running = true
	
	yield(self, \"stop_internal_process\")
	
	Nodes.wheel.emit_signal(\"action_ended\", \"player\")


func _postprocess_d(pattern, phase_number):
	tween.remove_all()
	time_elapsed = 0
	
	match phase_number:
		0: postprocess_d1(pattern)


func postprocess_d1(pattern):
	for arrow in pattern.arrows:
		# adjust rot angle
		arrow.clamp_rot_angle()

# ==================

func _process(delta):
	if is_process_running and process_data:
		
		match process_data.phase_code:
			\"a0\", \"d0\":
				var pattern = process_data.pattern
				var visual = process_data.visuals[0]
				var arrow = process_data.pattern.arrows[0]
				var direction = int(process_data.phase_code == \"a0\") * 2 - 1
				var displacement = delta * arrow.move_speed * direction
				
				visual.rotation_degrees += displacement
				
				arrow.rot_angle_displacement += displacement
				arrow.move_speed += pattern.acceleration
		
		time_elapsed += delta
		
		if time_elapsed > process_data.pattern.process_time:
			emit_signal(\"stop_internal_process\")


func _on_stop_internal_process(_who = null):
	process_data = {}
	is_process_running = false


func stop_process():
	if tween.is_active():
		tween.stop_all()
"

[sub_resource type="GDScript" id=1]
script/source = "extends Node


var first_condition
var second_condition


func _init():
	first_condition = funcref(self, \"fc\")
	second_condition = funcref(self, \"sc\")


# ===== FIRST CONDITION =====
func fc(pattern, phase_number):
	match phase_number:
		0: return fc1(pattern)


func fc1(pattern):
	var arrow = pattern.arrows[0]
	if !arrow.enemies_struck.empty() and abs(arrow.rot_angle_displacement) > 360: return true
	
	return false

# ===========================

# ===== SECOND CONDITION =====
func sc(pattern, phase_number):
	match phase_number:
		0: return sc1(pattern)


func sc1(pattern):
	var arrow = pattern.arrows[0]
	if arrow.struck_by.empty() and abs(arrow.rot_angle_displacement) > (360*2): return true
	
	return false

# ===========================
"

[resource]
resource_local_to_scene = true
script = ExtResource( 1 )
name = "Accelerate"
attack_patterns = [ {
"acceleration": 5.0,
"arrows": [ {
"damage": 1,
"move_speed": 10.0,
"rot_angle": 0.0,
"thickness": 2
} ],
"damage_bonus": 1.0,
"offset": [ 1080.0 ],
"process_time": 6.0
} ]
defend_patterns = [ {
"acceleration": 5.0,
"arrows": [ {
"move_speed": 10.0,
"rot_angle": 0.0,
"thickness": 2
} ],
"offset": [ 360.0 ],
"process_time": 6.0
} ]
hp_cost = 5
is_cost_percentage = false
hp_bonus = 2
is_bonus_percentage = false
conditions = SubResource( 1 )
behaviors = SubResource( 2 )
description = "An arrow that accelerates overtime. Adds 1DMG every half circle rotated."
first_condition = "The arrow hits an overlapping area after revoluting the circle once."
second_condition = "The arrow avoids any areas after revoluting the circle twice."
