[gd_resource type="Resource" load_steps=4 format=2]

[ext_resource path="res://Resources/Attack Skills/attack_skill.gd" type="Script" id=1]

[sub_resource type="GDScript" id=2]
script/source = "extends Node


var preprocess_a
var process_a
var postprocess_a

var preprocess_d
var process_d
var postprocess_d

var rng = RandomNumberGenerator.new()

# Attack:
# Enemy1 has one attack pattern.
# 1. One area with constant speed.

# Defend:
# Enemy1 has one defend pattern.
# 1. One area with constant speed.


func _init():
	rng.randomize()
	
	preprocess_a = funcref(self, \"_preprocess_a\")
	process_a = funcref(self, \"_process_a\")
	postprocess_a = funcref(self, \"_postprocess_a\")

	preprocess_d = funcref(self, \"_preprocess_d\")
	process_d = funcref(self, \"_process_d\")
	postprocess_d = funcref(self, \"_postprocess_d\")


# ===== ATTACK =====
func _preprocess_a(arrows, phase_number):
	rng.randomize()
	
	match phase_number:
		0: return preprocess_a1(arrows)


# phase 1
func preprocess_a1(arrows):
	for arrow in arrows:
		# process rotation angle
		arrow.rot_angle += rng.randi_range(0, 360)
		arrow.rot_angle = fmod(arrow.rot_angle, 360)
		if arrow.rot_angle < 0: arrow.rot_angle += 360
		
		# process thickness
		arrow.thickness = clamp(arrow.thickness, 2, 360)
		arrow.thickness = floor(arrow.thickness / 2)
	
	return arrows


func _process_a(arrows, delta, phase_number):
	match phase_number:
		0: return process_a1(arrows, delta)


# phase 1
func process_a1(arrows, delta):
	for arrow in arrows:
		arrow.rot_angle += delta * arrow.move_speed
		arrow.rot_angle = fmod(arrow.rot_angle, 360)
	
	return arrows


func _postprocess_a(arrows, phase_number):
	match phase_number:
		0: return postprocess_a1(arrows)


# phase 1
func postprocess_a1(arrows):
	return arrows

# ==================


# ===== DEFEND =====
func _preprocess_d(arrows, phase_number):
	rng.randomize()
	
	match phase_number:
		0: return preprocess_d1(arrows)


func preprocess_d1(arrows):
	for arrow in arrows:
		# process rotation angle
		arrow.rot_angle += rng.randi_range(0, 360)
		arrow.rot_angle = fmod(arrow.rot_angle, 360)
		if arrow.rot_angle < 0: arrow.rot_angle += 360
		
		# process thickness
		arrow.thickness = clamp(arrow.thickness, 2, 360)
		arrow.thickness = floor(arrow.thickness / 2)
	
	return arrows


func _process_d(arrows, delta, phase_number):
	match phase_number:
		0: return process_d1(arrows, delta)


func process_d1(arrows, delta):
	for arrow in arrows:
		arrow.rot_angle += delta * arrow.move_speed * -1
		arrow.rot_angle = fmod(arrow.rot_angle, 360)
		if arrow.rot_angle < 0: arrow.rot_angle += 360
	
	return arrows


func _postprocess_d(arrows, phase_number):
	match phase_number:
		0: return postprocess_d1(arrows)


func postprocess_d1(arrows):
	return arrows

# ==================
"

[sub_resource type="GDScript" id=1]
script/source = "extends Node


var first_condition
var second_condition


func _init():
	first_condition = funcref(self, \"fc\")
	second_condition = funcref(self, \"sc\")


func fc(arrows):
	return false


func sc(arrows):
	return true
"

[resource]
script = ExtResource( 1 )
name = "Basic"
attack_arrows = [ [ {
"damage": 5,
"move_speed": 150,
"rot_angle": 0,
"thickness": 2
} ] ]
defend_arrows = [ [ {
"move_speed": 150,
"rot_angle": 0,
"thickness": 2
} ] ]
hp_cost = 5
is_cost_percentage = false
hp_bonus = 1
is_bonus_percentage = false
conditions = SubResource( 1 )
behaviors = SubResource( 2 )
