[gd_resource type="Resource" load_steps=5 format=2]

[ext_resource path="res://Resources/Attack Skills/attack_skill.gd" type="Script" id=1]
[ext_resource path="res://Resources/Arrow/4-160-0.tres" type="Resource" id=2]

[sub_resource type="GDScript" id=2]
script/source = "extends Node


var attack_behavior = null
var defend_behavior = null
var randomize_attack = null
var randomize_defend = null
var rng = RandomNumberGenerator.new()


# Attack:
# Basic has one phase with one arrow only. It moves at constant speed.

# Defend:
# Basic has one arrow only. It moves at constant speed.


func _init():
	attack_behavior = funcref(self, \"func_attack_behavior\")
	defend_behavior = funcref(self, \"func_attack_behavior\")
	randomize_attack = funcref(self, \"func_randomize_attack\")
	randomize_defend = funcref(self, \"func_randomize_defend\")
	
	rng.randomize()


func func_randomize_attack(arrows):
	var processed_arrows = []
	
	var rot_angle_variation = rng.randi_range(0, 360)
	
	for arrow in arrows:
		var tmp_arrow = arrow.duplicate()
		tmp_arrow.thickness = max(2, fmod(abs(tmp_arrow.thickness), 360))
		tmp_arrow.rot_angle = rot_angle_variation
		processed_arrows.append(tmp_arrow)
		
	return processed_arrows


func func_randomize_defend(arrows):
	var processed_arrows = []
	
	var rot_angle_variation = rng.randi_range(0, 360)
	
	for arrow in arrows:
		var tmp_arrow = arrow.duplicate()
		tmp_arrow.thickness = max(2, fmod(abs(tmp_arrow.thickness), 360))
		tmp_arrow.rot_angle = rot_angle_variation
		processed_arrows.append(tmp_arrow)
		
	return processed_arrows


# Processing for each phase.
func func_attack_behavior(delta, arrows):
	var new_arrows = []
	
	for arrow in arrows:
		var new_arrow = arrow
		var new_rot_angle = new_arrow.rot_angle
		
		new_rot_angle += delta * new_arrow.move_speed
		new_rot_angle = fmod(new_rot_angle, 360)
		
		new_arrow.rot_angle = new_rot_angle
		
		new_arrows.append(new_arrow)
	
	return new_arrows


func func_defend_behavior(delta, arrows):
	var new_arrows = []
	
	for arrow in arrows:
		var new_arrow = arrow
		var new_rot_angle = new_arrow.rot_angle
		
		new_rot_angle += delta * new_arrow.move_speed
		new_rot_angle = fmod(new_rot_angle, 360)
		
		new_arrow.rot_angle = new_rot_angle
		
		new_arrows.append(new_arrow)
	
	return new_arrows
"

[sub_resource type="GDScript" id=1]
script/source = "extends Node


func first_condition(arrows):
	for arrow in arrows:
		if !arrow.enemies_struck.empty(): return true
	
	return false


func second_condition(arrows):
	for arrow in arrows:
		if !arrow.struck_by.empty(): return false
	
	return true
"

[resource]
script = ExtResource( 1 )
name = "Basic"
attack_arrows = [ [ ExtResource( 2 ) ] ]
defend_arrows = [ [ ExtResource( 2 ) ] ]
damage = 5
hp_cost = 5
is_cost_percentage = false
hp_bonus = 1
is_bonus_percentage = false
conditions = SubResource( 1 )
behaviors = SubResource( 2 )
