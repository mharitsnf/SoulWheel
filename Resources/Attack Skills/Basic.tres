[gd_resource type="Resource" load_steps=4 format=2]

[ext_resource path="res://Resources/Attack Skills/attack_skill.gd" type="Script" id=1]

[sub_resource type="GDScript" id=2]
script/source = "extends Node


var preprocess_a
var process_a
var postprocess_a

var preprocess_d
var process_d
var postprocess_d

var time_elapsed = 0

var rng = RandomNumberGenerator.new()
var tween : Tween = Tween.new()

var did_player_acted = false

signal stop_running

# Attack:
# Enemy1 has one attack pattern.
# 1. One area with constant speed.

# Defend:
# Enemy1 has one defend pattern.
# 1. One area with constant speed.


func _init():
	add_child(tween)
	
	var _e = connect(\"stop_running\", self, \"_on_stop_running\")
	_e = tween.connect(\"tween_all_completed\", self, \"_on_tween_all_completed\")
	
	rng.randomize()
	
	preprocess_a = funcref(self, \"_preprocess_a\")
	process_a = funcref(self, \"_process_a\")
	postprocess_a = funcref(self, \"_postprocess_a\")

	preprocess_d = funcref(self, \"_preprocess_d\")
	process_d = funcref(self, \"_process_d\")
	postprocess_d = funcref(self, \"_postprocess_d\")


# ===== ATTACK =====
func _preprocess_a(pattern, phase_number):
	rng.randomize()
	
	match phase_number:
		0: return preprocess_a1(pattern)


# phase 1
func preprocess_a1(pattern):
	for arrow in pattern.arrows:
		# process rotation angle
		arrow.rot_angle += rng.randi_range(0, 360)
		arrow.rot_angle = fmod(arrow.rot_angle, 360)
		if arrow.rot_angle < 0: arrow.rot_angle += 360
		
		# process thickness
		arrow.thickness = clamp(arrow.thickness, 2, 360)
		arrow.thickness = floor(arrow.thickness / 2)
	
	return pattern


func _process_a(pattern, visuals, phase_number):
	var result
	
	match phase_number:
		0: result = process_a1(pattern, visuals)
	
	return result


# phase 1
func process_a1(pattern, visuals):
	var _e 
	
	for i in range(pattern.arrows.size()):
		var arrow = pattern.arrows[i]
		var visual = visuals[i]
		var offset = pattern.offset[i]
		
		_e = tween.interpolate_property(
			arrow, \"rot_angle\", 
			arrow.rot_angle, arrow.rot_angle + offset,
			pattern.process_time,
			Tween.TRANS_LINEAR, Tween.EASE_IN_OUT
		)
		
		_e = tween.interpolate_property(
			visual, \"rotation_degrees\",
			visual.rotation_degrees, visual.rotation_degrees + offset,
			pattern.process_time,
			Tween.TRANS_LINEAR, Tween.EASE_IN_OUT
		)
	
	_e = tween.start()
	
	# wait until the tween is stopped regardless how it stopped;
	# by player input or time out?
	yield(self, \"stop_running\")
	
	return [pattern, did_player_acted]


func _postprocess_a(pattern, phase_number):
	time_elapsed = 0
	
	match phase_number:
		0: return postprocess_a1(pattern)


# phase 1
func postprocess_a1(pattern):
	for arrow in pattern.arrows:
		arrow.rot_angle = fmod(arrow.rot_angle, 360)
		if arrow.rot_angle < 0: arrow.rot_angle += 360
		
	return pattern

# ==================


# ===== DEFEND =====
func _preprocess_d(pattern, phase_number):
	rng.randomize()
	
	match phase_number:
		0: return preprocess_d1(pattern)


func preprocess_d1(pattern):
	for arrow in pattern.arrows:
		# process rotation angle
		arrow.rot_angle += rng.randi_range(0, 360)
		arrow.rot_angle = fmod(arrow.rot_angle, 360)
		if arrow.rot_angle < 0: arrow.rot_angle += 360
		
		# process thickness
		arrow.thickness = clamp(arrow.thickness, 2, 360)
		arrow.thickness = floor(arrow.thickness / 2)
	
	return pattern


func _process_d(pattern, visuals, phase_number):
	print(tween)
	
	var result
	
	match phase_number:
		0: result = process_d1(pattern, visuals)
	
	return result


func process_d1(pattern, visuals):
	var _e 
	
	for i in range(pattern.arrows.size()):
		var arrow = pattern.arrows[i]
		var visual = visuals[i]
		var offset = pattern.offset[i]
		
		_e = tween.interpolate_property(
			arrow, \"rot_angle\", 
			arrow.rot_angle, arrow.rot_angle + offset,
			pattern.process_time,
			Tween.TRANS_LINEAR, Tween.EASE_IN_OUT
		)
		
		_e = tween.interpolate_property(
			visual, \"rotation_degrees\",
			visual.rotation_degrees, visual.rotation_degrees + offset,
			pattern.process_time,
			Tween.TRANS_LINEAR, Tween.EASE_IN_OUT
		)
	
	_e = tween.start() 
	
	# wait until the tween is stopped regardless how it stopped;
	# by player input or time out?
	yield(self, \"stop_running\")
	
	return [pattern, did_player_acted]


func _postprocess_d(pattern, phase_number):
	time_elapsed = 0
	
	match phase_number:
		0: return postprocess_d1(pattern)


func postprocess_d1(pattern):
	for arrow in pattern.arrows:
		arrow.rot_angle = fmod(arrow.rot_angle, 360)
		if arrow.rot_angle < 0: arrow.rot_angle += 360
		
	return pattern

# ==================

func _input(event):
	if event.is_action_pressed(\"ui_accept\") and tween.is_active():
		did_player_acted = true
		emit_signal(\"stop_running\")


func _on_tween_all_completed():
	emit_signal(\"stop_running\")


func _on_stop_running():
	if tween.is_active():
		var _e = tween.remove_all()
"

[sub_resource type="GDScript" id=1]
script/source = "extends Node


var first_condition
var second_condition


func _init():
	first_condition = funcref(self, \"fc\")
	second_condition = funcref(self, \"sc\")


# ===== FIRST CONDITION =====
func fc(pattern, phase_number):
	match phase_number:
		0: return fc1(pattern)


func fc1(pattern):
	for arrow in pattern.arrows:
		for enemy in arrow.enemies_struck:
			if arrow.enemies_struck.count(enemy) > 1: return true
	return false
# ===========================

# ===== SECOND CONDITION =====
func sc(pattern, phase_number):
	match phase_number:
		0: return sc2(pattern)


func sc2(pattern):
	for arrow in pattern.arrows:
		if !arrow.struck_by.empty(): return false
	return true
# ===========================
"

[resource]
script = ExtResource( 1 )
name = "Basic"
attack_patterns = [ {
"arrows": [ {
"damage": 5,
"move_speed": 125.0,
"rot_angle": 0.0,
"thickness": 2
} ],
"offset": [ 1080.0 ],
"process_time": 5.0
} ]
defend_patterns = [ {
"arrows": [ {
"move_speed": 125.0,
"rot_angle": 0.0,
"thickness": 2
} ],
"offset": [ 1080.0 ],
"process_time": 5.0
} ]
hp_cost = 5
is_cost_percentage = false
hp_bonus = 1
is_bonus_percentage = false
conditions = SubResource( 1 )
behaviors = SubResource( 2 )
