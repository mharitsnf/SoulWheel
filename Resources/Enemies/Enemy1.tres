[gd_resource type="Resource" load_steps=3 format=2]

[ext_resource path="res://Resources/Enemies/enemy_data_model.gd" type="Script" id=1]

[sub_resource type="GDScript" id=1]
script/source = "extends Node


var preprocess
var process
var postprocess

var time_elapsed = 0

var rng = RandomNumberGenerator.new()

# Attack:
# Enemy1 has one attack pattern.
# 1. One area with constant speed.

# Defend:
# Enemy1 has one defend pattern.
# 1. One area with constant speed.


func _init(current_behavior):
	rng.randomize()
	
	match current_behavior:
		Character.Behavior.ATTACK:
			preprocess = funcref(self, \"preprocess_a\")
			process = funcref(self, \"process_a\")
			postprocess = funcref(self, \"postprocess_a\")
		
		Character.Behavior.DEFEND:
			preprocess = funcref(self, \"preprocess_d\")
			process = funcref(self, \"process_d\")
			postprocess = funcref(self, \"postprocess_d\")


# ===== ATTACK / ENEMY'S TURN =====
func preprocess_a(attack_pattern, behavior_idx):
	rng.randomize()
	
	match behavior_idx:
		0: return preprocess_a1(attack_pattern)
		1: return preprocess_a2(attack_pattern)


# behavior 1
func preprocess_a1(attack_pattern):
	var rot_angle_variation = rng.randi_range(0, 360)
	
	for area in attack_pattern.areas:
		# process rotation angle
		area.rot_angle += rot_angle_variation
		area.rot_angle = fmod(area.rot_angle, 360)
		if area.rot_angle < 0: area.rot_angle += 360
		
		# process thickness
		area.thickness = clamp(area.thickness, 2, 360)
		area.thickness = floor(area.thickness / 2)
	
	return attack_pattern


# behavior 2
func preprocess_a2(attack_pattern):
	var rot_angle_variation = rng.randi_range(0, 360)
	
	for area in attack_pattern.areas:
		# process rotation angle
		area.rot_angle += rot_angle_variation
		area.rot_angle = fmod(area.rot_angle, 360)
		if area.rot_angle < 0: area.rot_angle += 360
		
		# process thickness
		area.thickness = clamp(area.thickness, 2, 360)
		area.thickness = floor(area.thickness / 2)
	
	return attack_pattern


func process_a(attack_pattern, delta, behavior_idx):
	var result
	
	match behavior_idx:
		0: result = process_a1(attack_pattern, delta)
		1: result = process_a2(attack_pattern, delta)
	
	time_elapsed += delta
	return result


# behavior 1
func process_a1(attack_pattern, delta):
	var is_finished = false
	
	for area in attack_pattern.areas:
		# process rotation angle
		area.rot_angle += delta * area.move_speed
		area.rot_angle = fmod(area.rot_angle, 360)
	
	is_finished = time_elapsed > attack_pattern.process_time
	
	return [attack_pattern, is_finished]


# behavior 2
func process_a2(attack_pattern, delta):
	var is_finished = false
	
	for area in attack_pattern.areas:
		# process rotation angle
		area.rot_angle += delta * area.move_speed
		area.rot_angle = fmod(area.rot_angle, 360)
		
	is_finished = time_elapsed > attack_pattern.process_time
	
	return [attack_pattern, is_finished]


func postprocess_a(attack_pattern, behavior_idx):
	time_elapsed = 0
	
	match behavior_idx:
		0: return postprocess_a1(attack_pattern)
		1: return postprocess_a2(attack_pattern)


# behavior 1
func postprocess_a1(attack_pattern):
	return attack_pattern


# behavior 2
func postprocess_a2(attack_pattern):
	return attack_pattern

# ==================


# ===== DEFEND / SOUL LOCK =====
func preprocess_d(defend_pattern, behavior_idx):
	rng.randomize()
	
	match behavior_idx:
		0: return preprocess_d1(defend_pattern)


func preprocess_d1(defend_pattern):
	for area in defend_pattern.areas:
		# process rotation angle
		area.rot_angle += rng.randi_range(0, 360)
		area.rot_angle = fmod(area.rot_angle, 360)
		if area.rot_angle < 0: area.rot_angle += 360
		
		# process thickness
		area.thickness = clamp(area.thickness, 2, 360)
		area.thickness = floor(area.thickness / 2)
	
	return defend_pattern


func process_d(defend_pattern, delta, behavior_idx):
	var result
	
	match behavior_idx:
		0: result = process_d1(defend_pattern, delta)
	
	time_elapsed += delta
	return result


func process_d1(defend_pattern, delta):
	var is_finished = false
	
	for area in defend_pattern.areas:
		area.rot_angle += delta * area.move_speed
		area.rot_angle = fmod(area.rot_angle, 360)
	
	is_finished = time_elapsed > defend_pattern.process_time
	
	return [defend_pattern, is_finished]


func postprocess_d(defend_pattern, behavior_idx):
	time_elapsed = 0
	
	match behavior_idx:
		0: return postprocess_d1(defend_pattern)


func postprocess_d1(defend_pattern):
	return defend_pattern
# ==================
"

[resource]
script = ExtResource( 1 )
max_health = 30
defend_patterns = [ {
"areas": [ {
"move_speed": 50.0,
"rot_angle": 0.0,
"thickness": 60.0
}, {
"move_speed": 150.0,
"rot_angle": 0.0,
"thickness": 15.0
} ],
"process_time": 5.0
} ]
attack_patterns = [ {
"areas": [ {
"damage": 5,
"is_damage_percentage": false,
"move_speed": 50.0,
"rot_angle": 0.0,
"thickness": 30.0
}, {
"damage": 5,
"is_damage_percentage": false,
"move_speed": 50.0,
"rot_angle": 120.0,
"thickness": 30.0
}, {
"damage": 5,
"is_damage_percentage": false,
"move_speed": 50.0,
"rot_angle": 240.0,
"thickness": 30.0
} ],
"process_time": 5.0
}, {
"areas": [ {
"damage": 5,
"is_damage_percentage": false,
"move_speed": 50.0,
"rot_angle": 0.0,
"thickness": 180.0
} ],
"process_time": 5.0
} ]
behaviors = SubResource( 1 )
